import os
import subprocess
import dbus
import time
import readline
import re

#history -c
#truncate -s 0 history.m3u

def create_custom_playlist():
    playlist_name = input("Enter the custom playlist name: ")
    playlist_path = os.path.join(os.path.expanduser("~"), f"{playlist_name}.m3u")

    with open(playlist_path, "w") as playlist_file:
        while True:
            song_title = input("Enter a song title to add to the playlist (type '0' to stop): ")
            if song_title == "0":
                break
            playlist_file.write(f"{song_title}.m3u\n")

    print(f"Custom playlist '{playlist_name}' has been created and saved to {playlist_path}.")

def vlc_play():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Play"])

def vlc_pause():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Pause"])

def vlc_next():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Next"])

def vlc_previous():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Previous"])

def vlc_enqueue_playlist(playlist_path):
    if not playlist_path.endswith('.m3u'):
        playlist_path += '.m3u'
    formatted_path = f"{playlist_path}"
    subprocess.run(["vlc", "--playlist-enqueue", formatted_path])

def vlc_enqueue_song(song_title):
    formatted_title = f"{song_title}.m3u"
    subprocess.run(["vlc", "--playlist-enqueue", formatted_title])


def skip_tracks(num_tracks):
    bus = dbus.SessionBus()
    player_obj = bus.get_object('org.mpris.MediaPlayer2.vlc', '/org/mpris/MediaPlayer2')
    player_interface = dbus.Interface(player_obj, 'org.mpris.MediaPlayer2.Player')

    if num_tracks > 0:
        for _ in range(num_tracks):
            vlc_previous()
            time.sleep(0.1)
    else:
        for _ in range(-num_tracks):
            vlc_next()
            time.sleep(0.1)

def change_volume(volume):
    if volume < 1 or volume > 10:
        print("Invalid input. Please enter a number between 1 and 10.")
        return

    volume_percent = volume * 10
    command = f"amixer -D pulse sset Master {volume_percent}%"
    subprocess.run(command, shell=True)

# Create an empty list to track the executed commands
executed_commands = []

def execute_command(command):
    os.system(command)
    executed_commands.append(command)

def save_command_history_to_playlist(playlist_name):
    # Get the user's home directory
    home_dir = os.path.expanduser("~")
    history_file_path = os.path.join(home_dir, ".bash_history")

    # Read the entire history from the history file
    with open(history_file_path, "r") as history_file:
        history_lines = history_file.readlines()

    # Create the M3U playlist with the given playlist_name
    playlist_path = os.path.join(home_dir, f"{playlist_name}.m3u")
    with open(playlist_path, "w") as playlist_file:
        line_number = 1
        for line in history_lines:
            command = line.strip()
            if command:
                playlist_file.write(f"# Command: {line_number}\n")
                # If your use case requires running these commands with VLC, you can modify the below line accordingly
                playlist_file.write(f"file://{command}\n")
                line_number += 1

    print(f"{line_number - 1} command(s) from history have been saved to {playlist_path}.")


def select_open_commands(input_file, output_file):
    with open(input_file, "r") as f_in:
        lines = f_in.readlines()

    with open(output_file + ".m3u", "w") as f_out:
        for line in reversed(lines):
            # Keep only the lines that contain the text "open" and end with ".m3u'"
            if "open '" in line and line.strip().endswith(".m3u'"):
                # Use regex to remove numbers at the beginning of the line and "open " and one space
                line_without_numbers = re.sub(r"^\d+\s*open\s+", "", line.strip())
                # Remove single quote marks from the line
                line_without_quotes = line_without_numbers.replace("'", "")
                # Write the modified line to the output file
                f_out.write(line_without_quotes + "\n")



if __name__ == "__main__":
    while True:
        print("1. Play")
        print("2. Pause")
        print("3. Next Track")
        print("4. Previous Track")
        print("5. Skip Tracks")
        print("6. Enqueue Playlist")
        print("7. Create Custom Playlist")
        print("8. Change Volume")
        print("9. Run Command in Terminal")
        print("10. Create History Playlist")
        print("0. Exit")
        choice = input("Enter your choice: ")
        if choice == "1":
            vlc_play()
        elif choice == "2":
            vlc_pause()
        elif choice == "3":
            vlc_next()
        elif choice == "4":
            vlc_previous()
        elif choice == "5":
            while True:
                try:
                    num_tracks = int(input("Enter the number of tracks to skip (negative number to go back): "))
                    if num_tracks == 0:
                        break
                    skip_tracks(num_tracks)
                except ValueError:
                    print("Invalid input. Please enter a valid number.")
        elif choice == "6":
            playlist_path = input("Enter the path of the m3u playlist to enqueue: ")
            vlc_enqueue_playlist(playlist_path)
        elif choice == "7":
            create_custom_playlist()
        elif choice == "8":
            while True:
                try:
                    volume = float(input("Enter the volume (0.0 to 1.0): "))
                    change_volume(volume)
                    # Ask the user if they want to change the volume again
                    again = input("Do you want to change the volume again? (y/n): ")
                    if again.lower() != 'y':
                        break
                except ValueError:
                    print("Invalid input. Please enter a valid number between 0.0 and 1.0.")
        # ... (existing code)
        elif choice == "9":
            while True:
                command = input("Enter the command to run in the terminal (type '0' to stop): ")
                if command == "0":
                    break
                # Execute the command using the custom function to track executed commands
                execute_command(command)
                # Add "open '" to the beginning and ".m3u' to the end of the command
                command = f"open '{command}.m3u'"
                os.system(command)
        # ... (existing code)
        elif choice == "10":
            input_file = "history.m3u"
            output_file = input("Enter the name of the output file (without extension): ")

            select_open_commands(input_file, output_file)
        elif choice == "0":
            break
        else:
            print("Invalid choice. Please try again.")
