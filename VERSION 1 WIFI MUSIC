import socket
import time
import os
import subprocess
from fuzzywuzzy import fuzz

executed_commands = []
selected_playlists = set()
last_played_song = ""
last_played_line = ""
import os
import subprocess
import dbus
import time
import readline
import re
import random
import shutil
import readline
import fuzzywuzzy
from fuzzywuzzy import fuzz
from urllib.parse import unquote

#cat /dev/null > ~/.bash_history
#history -c
#truncate -s 0 history.m3u
#truncate -s 0 history3333.m3u

def extract_info_from_playlists(playlist_path):
    playlist_info = {"Artist": "", "Album": "", "Song": ""}
    
    with open(playlist_path, "r") as playlist_file:
        for line in playlist_file:
            if line.startswith("# Artist:"):
                playlist_info["Artist"] = line.split(":")[1].strip()
            elif line.startswith("# Album:"):
                playlist_info["Album"] = line.split(":")[1].strip()
            elif line.startswith("# Song:"):
                playlist_info["Song"] = line.split(":")[1].strip()
    
    return playlist_info

def guessing_game(playlist_info):
    print("Guess the details of the playlist:")
    guess_artist = input("Guess the Artist: ")
    guess_album = input("Guess the Album: ")
    guess_song = input("Guess the Song: ")

    return (guess_artist.lower() == playlist_info["Artist"].lower() and
            guess_album.lower() == playlist_info["Album"].lower() and
            guess_song.lower() == playlist_info["Song"].lower())

def listening_game():
    playlists_folder = "/home/riley"  # Change to the appropriate folder
    playlist_titles = []

    with open("history3333.m3u", "r") as file:
        for line in file:
            line = line.strip()
            if not line.endswith(".m3u"):
                line += ".m3u"
            playlist_titles.append(line)

    while True:
        if not playlist_titles:
            print("No playlists available.")
            break
        
        playlist_title = random.choice(playlist_titles)
        playlist_titles.remove(playlist_title)
        
        playlist_path = os.path.join(playlists_folder, playlist_title)
        
        if os.path.exists(playlist_path):
            playlist_info = extract_info_from_playlists(playlist_path)
            os.system(f"vlc -I null --play-and-exit '{playlist_path}'")
            result = guessing_game(playlist_info)
            if result:
                print("Correct!")
            else:
                print(f"Sorry, the correct information is:")
                print(f"Artist: {playlist_info['Artist']}")
                print(f"Album: {playlist_info['Album']}")
                print(f"Song: {playlist_info['Song']}")
        else:
            print(f"Playlist '{playlist_title}' not found.")
        
        user_input = input("Enter 0 to exit or press Enter to continue: ")
        if user_input == "0":
            break

def clear_bash_history():
    os.system("sudo history >> history888.m3u")


def save_bash_history_to_m3u():
    # Path to the history file
    bash_history_path = os.path.join(os.path.expanduser("~"), ".bash_history")

    # Read the Bash history
    with open(bash_history_path, "r") as bash_history_file:
        history_lines = bash_history_file.readlines()

    # Path to the history.m3u file
    history_m3u_path = os.path.join(os.path.expanduser("~"), "history.m3u")
    # Write the Bash history to history.m3u
    with open(history_m3u_path, "w") as history_m3u_file:
        history_m3u_file.writelines(history_lines)

def create_custom_playlist():
    playlist_name = input("Enter the custom playlist name: ")
    playlist_path = os.path.join(os.path.expanduser("~"), f"{playlist_name}.m3u")

    with open(playlist_path, "w") as playlist_file:
        while True:
            song_title = input("Enter a song title to add to the playlist (type '0' to stop): ")
            if song_title == "0":
                break
            playlist_file.write(f"{song_title}.m3u\n")

def vlc_play():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Play"])

def vlc_pause():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Pause"])

def vlc_next():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Next"])

def vlc_previous():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Previous"])

def vlc_enqueue_playlist(playlist_path):
    if not playlist_path.endswith('.m3u'):
        playlist_path += '.m3u'
    formatted_path = f"{playlist_path}"
    subprocess.run(["vlc", "--playlist-enqueue", formatted_path])

def vlc_enqueue_song(song_title):
    formatted_title = f"{song_title}.m3u"
    subprocess.run(["vlc", "--playlist-enqueue", formatted_title])

def change_volume(volume):
    if volume < 1 or volume > 10:
        print("Invalid input. Please enter a number between 1 and 10.")
        return

    volume_percent = volume * 10
    command = f"amixer -D pulse sset Master {volume_percent}%"
    subprocess.run(command, shell=True)

def change_volume(volume):
    if volume < 1 or volume > 10:
        print("Invalid input. Please enter a number between 1 and 10.")
        return

    volume_percent = volume * 10
    command = f"amixer -D pulse sset Master {volume_percent}%"
    subprocess.run(command, shell=True)
# Create an empty list to track the executed commands
executed_commands = []


def get_current_volume():
    # Get the current volume level using amixer command
    command = "amixer -D pulse sget Master | grep 'Front Left:' | awk -F'[][]' '{ print $2 }'"
    output = subprocess.check_output(command, shell=True, text=True)
    volume_str = output.strip().replace('%', '')  # Remove the percentage sign
    return int(volume_str)

def change_volume2():
    current_volume = get_current_volume()
    new_volume = current_volume + 10

    if new_volume > 100:
        new_volume = 100

    command = f"amixer -D pulse sset Master {new_volume}%"
    subprocess.run(command, shell=True)


def change_volume3():
    current_volume = get_current_volume()
    new_volume = current_volume - 10

    if new_volume > 100:
        new_volume = 100

    command = f"amixer -D pulse sset Master {new_volume}%"
    subprocess.run(command, shell=True)



def skip_tracks(choice):
    bus = dbus.SessionBus()
    player_obj = bus.get_object('org.mpris.MediaPlayer2.vlc', '/org/mpris/MediaPlayer2')
    player_interface = dbus.Interface(player_obj, 'org.mpris.MediaPlayer2.Player')

    if choice > 0:
        for _ in range(choice):
            vlc_previous()
            time.sleep(0.1)
    else:
        for _ in range(-choice):
            vlc_next()
            time.sleep(0.1)

# Create an empty list to track the executed commands
executed_commands = []

def execute_command(command):
    formatted_command = f"open '{command}.m3u'"
    os.system(formatted_command)
    executed_commands.append(formatted_command)

def execute_command5(playlist_path):
    command = f"open '{playlist_path}'"
    subprocess.Popen(command, shell=True)


# (existing code)

def save_command_history_to_playlist(playlist_name):
    # Get the user's home directory
    home_dir = os.path.expanduser("~")
    history_file_path = os.path.join(home_dir, "history.m3u")

    # Read the entire history from the history file
    with open(history_file_path, "r") as history_file:
        history_lines = history_file.readlines()

    # Ask the user for the number of lines to include in the playlist
    num_lines = int(input("Enter the number of lines from the history to include in the playlist: "))
    if num_lines <= 0:
        print("Invalid number of lines. Playlist not created.")
        return

    # Create the M3U playlist with the given playlist_name
    playlist_path = os.path.join(home_dir, f"{playlist_name}.m3u")
    with open(playlist_path, "w") as playlist_file:
        line_number = 1
        for line in history_lines[-num_lines:]:
            if "open" in line and ".m3u" in line:
                # Remove all the information before the single quotes and delete the single quotes
                command = line.split("'")[1]
                playlist_file.write(f"# Command: {line_number}\n")
                playlist_file.write(f"{command}\n")
                line_number += 1

    print(f"{line_number - 1} command(s) from history have been saved to {playlist_path}.")

def select_open_commands(input_file, output_file):
    with open(input_file, "r") as f_in:
        lines = f_in.readlines()

    with open(output_file + ".m3u", "w") as f_out:
        for line in reversed(lines):
            # Keep only the lines that contain the text "open" and end with ".m3u'"
            if "open '" in line and line.strip().endswith(".m3u'"):
                # Use regex to remove numbers at the beginning of the line and "open " and one space
                line_without_numbers = re.sub(r"^\d+\s*open\s+", "", line.strip())
                # Remove single quote marks from the line
                line_without_quotes = line_without_numbers.replace("'", "")
                # Write the modified line to the output file
                f_out.write(line_without_quotes + "\n")

def select_random_song_from_history(playlist_path):
    # Get the user's home directory
    home_dir = os.path.expanduser("~")
    history_file_path = os.path.join(home_dir, "history.m3u")

    # Read the entire history from the history file
    with open(history_file_path, "r") as history_file:
        playlist_lines = history_file.readlines()

    # Remove any lines that start with '#'
    playlist_lines = [line for line in playlist_lines if not line.startswith("#")]

    # Select a random song from the playlist
    if playlist_lines:
        random_song = random.choice(playlist_lines).strip()
        return random_song
    else:
        print("The playlist is empty.")
        return None

def find_closest_playlist(playlist_dir, partial_match, min_similarity=47):
    playlists = [f.replace('', '') for f in os.listdir(playlist_dir) if f.endswith('.m3u')]

    # Remove leading/trailing spaces
    partial_match = partial_match.strip()

    print("Cleaned partial match:", partial_match)

    max_similarity = 0
    closest_match = None

    for playlist in playlists:
        similarity = fuzz.ratio(partial_match, playlist)
        print("Playlist:", playlist, "Similarity:", similarity)

        if similarity > max_similarity:
            max_similarity = similarity
            closest_match = playlist

    print("Closest match:", closest_match, "with similarity:", max_similarity)

    if max_similarity >= min_similarity:
        return closest_match
    else:
        return None

def extract_info_from_m3u2(file_path):
    with open(file_path, "r") as m3u_file:
        content = m3u_file.read()

    # Use regular expressions to find the artist and album information
    artist_match = re.search(r"# Artist: (.+)", content)
    album_match = re.search(r"# Album: (.+)", content)

    artist = artist_match.group(1) if artist_match else None
    album = album_match.group(1) if album_match else None

    return artist, album

def load_history_to_m3u(history_file_path):
    # Run the bash command "history >> history.m3u"
    command = f"history >> {history_file_path}"
    subprocess.run(command, shell=True)

def select_random_song_from_history2(playlist_path):
    with open(playlist_path, "r") as playlist_file:
        playlist_lines = playlist_file.readlines()

    # Remove any lines that start with '#'
    playlist_lines = [line for line in playlist_lines if not line.startswith("#")]

    # Select a random song from the playlist
    if playlist_lines:
        random_song = random.choice(playlist_lines).strip()
        return random_song
    else:
        print("The playlist is empty.")
        return None

def extract_info_from_m3u(file_path):
    with open(file_path, "r") as m3u_file:
        content = m3u_file.read()

    # Use regular expressions to find the artist and album information
    artist_match = re.search(r"# Artist: (.+)", content)
    album_match = re.search(r"# Album: (.+)", content)

    artist = artist_match.group(1) if artist_match else None
    album = album_match.group(1) if album_match else None

    return artist, album

def game_question():
    folder_path = "/home/riley"  # Replace with the correct folder path

    # Get a list of all .m3u files in the folder
    m3u_files = [file for file in os.listdir(folder_path) if file.endswith('.m3u') and len(file) <= 28]

    total_questions = 0
    correct_answers = 0
    incorrect_answers = 0
    opted_out_questions = 0

    while True:
        # Select a random .m3u file
        file = random.choice(m3u_files)
        file_path = os.path.join(folder_path, file)
        artist, album = extract_info_from_m3u(file_path)

        print(f"File: {file}")
        print(f"Artist: {artist}")
        print(f"Album: ")
        print()
        if artist == album:
            continue
        if artist == "Music":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "- 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "New Folder (6)":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 3":
            print("Error parsing the song information. Skipping this question.\n")
        elif artist == "Unknown Artist":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Unknown Album":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Compilations":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Media":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "share":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "mom and dad stuff":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Music":
            print("Error parsing the song information. Skipping this question.\n")
            continue

        user_answer = input("Your answer for the album (or enter ' to opt out, or '0' to exit): ")
        if user_answer == '0':
            break

        total_questions += 1

        if user_answer == "'":
            opted_out_questions += 1
            print("Question opted out.\n")
        elif user_answer.lower() in album.lower():
            print("Correct! You guessed correctly.\n")
            correct_answers += 1
        else:
            print(f"Sorry, the correct answer is '{album}'.\n")
            incorrect_answers += 1

    print("Game Over!")
    print(f"Total Correct Answers: {correct_answers}")
    print(f"Total Incorrect Answers: {incorrect_answers}")
    print(f"Total Opted Out Questions: {opted_out_questions}")

def extract_info_from_m3u2(file_path):
    with open(file_path, "r") as m3u_file:
        content = m3u_file.read()

    # Use regular expressions to find the artist and album information
    artist_match = re.search(r"# Artist: (.+)", content)
    album_match = re.search(r"# Album: (.+)", content)

    artist = artist_match.group(1) if artist_match else None
    album = album_match.group(1) if album_match else None

    return artist, album

def clean_string(s):
    # Remove non-letter and non-number characters
    return re.sub(r'[^a-zA-Z0-9]', '', s)

def game_question2():
    folder_path = "/home/riley"  # Replace with the correct folder path

    # Get a list of all .m3u files in the folder
    m3u_files = [file for file in os.listdir(folder_path) if file.endswith('.m3u') and len(file) <= 25]

    total_questions = 0
    correct_answers = 0
    incorrect_answers = 0
    opted_out_questions = 0

    while True:
        # Select a random .m3u file
        file = random.choice(m3u_files)
        file_path = os.path.join(folder_path, file)
        artist, album = extract_info_from_m3u(file_path)

        print(f"File: {file}")
        print(f"Artist: ")
        print(f"Album: {album}")
        print()
        if artist == album:
            continue
        if album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "- 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "New Folder (6)":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 2":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "untitled folder 3":
            print("Error parsing the song information. Skipping this question.\n")
        elif artist == "Unknown Artist":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Unknown Album":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Compilations":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "Media":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "share":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "mom and dad stuff":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif album == "None":
            print("Error parsing the song information. Skipping this question.\n")
            continue
        elif artist == "Music":
            print("Error parsing the song information. Skipping this question.\n")
            continue

        user_answer = input("Your answer for the artist (or enter ' to opt out, or '0' to exit): ")
        if user_answer == '0':
            break

        total_questions += 1

        if user_answer == "'":
            opted_out_questions += 1
            print("Question opted out.\n")
        elif user_answer.lower() in artist.lower():
            print("Correct! You guessed correctly.\n")
            correct_answers += 1
        else:
            print(f"Sorry, the correct answer is '{album}'.\n")
            incorrect_answers += 1

    print("Game Over!")
    print(f"Total Correct Answers: {correct_answers}")
    print(f"Total Incorrect Answers: {incorrect_answers}")
    print(f"Total Opted Out Questions: {opted_out_questions}")

def select_open_commands(input_file, output_file):
    with open(input_file, "r") as f_in:
        lines = f_in.readlines()

    with open(output_file + ".m3u", "w") as f_out:
        for line in lines:
            # Keep only the lines that contain the text "open" and end with ".m3u'"
            if "open '" in line and line.strip().endswith(".m3u'"):
                # Use regex to remove numbers at the beginning of the line and "open " and one space
                line_without_numbers = re.sub(r"^\d+\s*open\s+", "", line.strip())
                # Remove sin34rfgle quote marks from the line
                line_without_quotes = line_without_numbers.replace("'", "")
                line_without = line_without_quotes.replace(".m3u", "")
                # Write the modified line to the output file
                f_out.write(line_without + "\n")

def load_history_to_m3u():
    command = input("Enter the bash command to execute: ")
    try:
        subprocess.run(['bash', '-c', command], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error executing the command: {e}")
    else:
        print("Command executed successfully.")

def find_closest_playlist3(playlist_dir, partial_match, min_similarity=57):
    playlists = [f.replace('.m3u', '') for f in os.listdir(playlist_dir) if f.endswith('.m3u')]

    # Remove leading/trailing spaces and convert to lowercase
    partial_match = clean_string(partial_match)

    print("Cleaned partial match:", partial_match)

    max_similarity = 0
    closest_match = None

    for playlist in playlists:
        cleaned_playlist = clean_string(playlist)
        similarity = fuzz.ratio(partial_match, cleaned_playlist)
        print("Playlist:", playlist, "Similarity:", similarity)

        if similarity > max_similarity:
            max_similarity = similarity
            closest_match = playlist

    print("Closest match:", closest_match, "with similarity:", max_similarity)

    if max_similarity >= min_similarity:
        return closest_match
    else:
        return None

def find_closest_playlists(playlist_dir, partial_match, min_similarity=47, top_n=3):
    playlists = [f.replace('', '') for f in os.listdir(playlist_dir) if f.endswith('.m3u')]

    # Remove leading/trailing spaces
    partial_match = partial_match.strip()

    print("Cleaned partial match:", partial_match)

    playlist_matches = []

    for playlist in playlists:
        similarity = fuzz.ratio(partial_match, playlist)
        print("Playlist:", playlist, "Similarity:", similarity)

        playlist_matches.append((playlist, similarity))

    # Sort the playlist matches based on similarity in descending order
    playlist_matches.sort(key=lambda x: x[1], reverse=True)

    # Filter out playlists below the minimum similarity threshold
    playlist_matches = [(playlist, similarity) for playlist, similarity in playlist_matches if similarity >= min_similarity]

    # Take the top N matches
    top_matches = playlist_matches[:top_n]

    return top_matches

def vlc_play():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Play"])

def vlc_pause():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Pause"])

def vlc_next():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Next"])

def vlc_previous():
    subprocess.run(["dbus-send", "--type=method_call", "--dest=org.mpris.MediaPlayer2.vlc", "/org/mpris/MediaPlayer2", "org.mpris.MediaPlayer2.Player.Previous"])


def choose_playlist_from_list(playlists):
    print("Top matching playlists:")
    for i, (playlist, similarity) in enumerate(playlists, start=1):
        print(f"{i}. Playlist: {playlist}, Similarity: {similarity}")

    while True:
        try:
            choice = int(input(f"Choose a playlist (1-{len(playlists)}): "))
            if 1 <= choice <= len(playlists):
                return playlists[choice - 1][0]
            else:
                print("Invalid choice. Please enter a number between 1 and", len(playlists))
        except ValueError:
            print("Invalid input. Please enter a valid number.")
def change_volume(volume):
    if volume < 1 or volume > 10:
        print("Invalid input. Please enter a number between 1 and 10.")
        return

    volume_percent = volume * 10
    command = f"amixer -D pulse sset Master {volume_percent}%"
    subprocess.run(command, shell=True)
def execute_random_song():
    if not execute_random_song.random_selected:
        output_file = "history3333.m3u"
        try:
            history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
            random_song = select_random_song_from_history2(history_playlist_path)
            if random_song:
                print(f"Random song selected: {random_song}")
                # Run the bash command "open '{random_song}.m3u'"
                command = f"open '{random_song}.m3u'"
                subprocess.run(command, shell=True)
                execute_random_song.random_selected = True  # Set the flag to True
        except ValueError:
            print("Invalid input. Please enter a valid number.")
def execute_command(command):
    global last_played_song
    global last_played_line

    # Check if the command has already been executed
    if last_played_line == command:
        print("Command already executed. Skipping.")
        return

    m3u_file_path = f'/home/riley/{command}.m3u'

    # Open the file using xdg-open and wait for it to finish playing
    subprocess.Popen(['xdg-open', m3u_file_path]).wait()
    
    last_played_song = command
    last_played_line = command

def find_closest_playlist(playlist_dir, partial_match, min_similarity=47):
    playlists = [f.replace('.m3u', '') for f in os.listdir(playlist_dir) if f.endswith('.m3u')]
    partial_match = partial_match.strip()

    max_similarity = 0
    closest_match = None

    for playlist in playlists:
        similarity = fuzz.ratio(partial_match, playlist)
        if similarity > max_similarity:
            max_similarity = similarity
            closest_match = playlist

    if max_similarity >= min_similarity:
        return closest_match
    else:
        return None

def main():
    playlist_dir = '/home/riley'  # Replace with the actual path to your playlists
    existing_entries = set()
    random_selected = False  # Initialize random_selected
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(("0.0.0.0", 12345))
    server_socket.listen(1)

    print("Receiver is listening for connections...")

    conn, addr = server_socket.accept()
    print(f"Connection from {addr}")

    try:
        last_received_time = time.time()
        timeout_duration = 40  # Set the timeout duration in seconds
        last_received_line = ""

        while True:
            data = conn.recv(1024)
            if not data:
                break

            # Decode and print the most recent data
            decoded_data = data.decode()
            print(f"Received from client: {decoded_data}", end='\r')

            # Update the last received line
            last_received_line = decoded_data.splitlines()[-1]

            # Check if it's time to start a new line
            if time.time() - last_received_time > timeout_duration:
                # Write the last received line gathered during the timeout period
                if last_received_line:
                    with open("received_datazz.txt", "a") as file:
                        file.write(last_received_line + '\n')
                
                    if last_received_line == "K":
                        execute_random_song()
                         
                    # Call the execute_command function with the last_received_line
                    execute_command(last_received_line)

                    # Reset the last received line
                    last_received_line = ""
                    last_received_time = time.time()  # Update the last received time

                playlist_dir = '/home/riley'  # Replace with the actual path to your playlists
            if last_received_line == "K":
                                    vlc_pause()
            if "Z" in last_received_line:
                            output_file = "history3333.m3u"
                            try:
                                history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
                                random_song = select_random_song_from_history2(history_playlist_path)
                                if random_song:
                                    print(f"Random song selected: {random_song}")
                                        # Run the bash command "open '{random_song}.m3u'"
                                    command = f"open '{random_song}.m3u'"
                                    subprocess.run(command, shell=True)
                            except ValueError:
                                print("Invalid input. Please enter a valid number.")

            if last_received_line == "1":
                        change_volume(1)
            if last_received_line == "2":
                        change_volume(2)
            if last_received_line == "3":
                        change_volume(3)
            if last_received_line == "4":
                        change_volume(4)
            if last_received_line == "5":
                        change_volume(5)
            if last_received_line == "6":
                        change_volume(6)
            if last_received_line == "7":
                        change_volume(7)
            if last_received_line == "8":
                        change_volume(8)
            if last_received_line == "9":
                        change_volume(9)
            if last_received_line == "10":
                        change_volume(10)
            if "??" in last_received_line:
                                clean_choice = last_received_line.replace("??", "").strip()
                                closest_playlist = find_closest_playlist3(playlist_dir, clean_choice)

                                if closest_playlist:
                                    # Enqueue the playlist
                                    vlc_enqueue_playlist(closest_playlist)
                                    print(f"Playlist '{closest_playlist}' enqueued.")
                                else:
                                    print("No matching playlist found.")
            elif "qw" in last_received_line:
                        clean_choice2 = last_received_line.replace("qw", "").strip()  # Remove leading/trailing spaces
                        execute_command(last_received_line)
                        
                        # Check if the cleaned last_received_line is an existing .m3u file in the directory
                        playlist_path = os.path.join("/home/riley", f"{clean_choice2}.m3u")
                        if os.path.exists(playlist_path):
                            vlc_enqueue_playlist(clean_choice2)
                            
                            with open("history3333.m3u", "a+") as file:
                                file.seek(0)
                                existing_entries.update(file.read().splitlines())
                                
                                if clean_choice2 not in existing_entries:
                                    file.write(clean_choice2 + "\n")
                                    existing_entries.add(clean_choice2)
                                    print("Input written to history3333.m3u")
                                else:
                                    print("Duplicate entry. Skipping.")
                        else:
                            print(f"'{clean_choice2}.m3u' does not exist in the directory.")
            if "qq" in last_received_line:
                        output_file = "history3333.m3u"
                        try:
                            history_playlist_path = os.path.join(os.path.expanduser("~"), "history3333.m3u")
                            random_song = select_random_song_from_history2(history_playlist_path)
                            if random_song:
                                print(f"Random song selected: {random_song}")
                                    # Run the bash command "open '{random_song}.m3u'"
                                command = f"open '{random_song}.m3u'"
                                subprocess.run(command, shell=True)
                        except ValueError:
                            print("Invalid input. Please enter a valid number.")
            if "z" in last_received_line:
                clean_choice = last_received_line.replace("z", "").strip()

                # Check if the clean last_received_line has already been selected
                if clean_choice not in selected_playlists:
                    closest_playlist = find_closest_playlist(playlist_dir, clean_choice)

                    # Check if the closest playlist is different from the last played one
                    if closest_playlist != last_played_song:
                        execute_command(closest_playlist)
                        selected_playlists.add(clean_choice)
                else:
                    print("No playlist found.")

    except KeyboardInterrupt:
        pass
    finally:
        server_socket.close()


if __name__ == "__main__":
    main()
