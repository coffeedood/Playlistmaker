import os
import re
import urllib.parse
from collections import defaultdict

def sanitize_playlist_name(name):
    return re.sub(r'(\d+\s)?', '', re.sub(r'[^a-zA-Z0-9 ]', '', name).replace("'", ''))

def natural_sort_key(s):
    # Custom function to extract the numeric portion of a string for natural sorting
    return [int(c) if c.isdigit() else c for c in re.split(r'(\d+)', s)]

def create_playlists(path, playlist_dir):
    artists = defaultdict(list)
    albums = defaultdict(list)
    songs = defaultdict(list)
    counter = defaultdict(lambda: 1)  # Universal counter for all playlists starting at 1

    for root, dirs, files in os.walk(path):
        for file in files:
            if file.lower().endswith(('.aif', '.aiff')):
                artist_name = os.path.basename(os.path.dirname(root))
                album_name = os.path.basename(root)
                title = os.path.splitext(file)[0]

                artists[artist_name].append(os.path.join(root, file))
                albums[(artist_name, album_name)].append(os.path.join(root, file))
                songs[(artist_name, album_name, title)].append(os.path.join(root, file))

    # Sort albums by artist name and then by album name
    sorted_albums = sorted(albums.keys(), key=lambda x: (natural_sort_key(x[0]), natural_sort_key(x[1])))

    # Create album playlists
    for (artist_name, album_name) in sorted_albums:
        album_paths = albums[(artist_name, album_name)]
        album_playlist_path = os.path.join(playlist_dir, f'{sanitize_playlist_name(album_name)}_{sanitize_playlist_name(artist_name)}.m3u')
        with open(album_playlist_path, 'w') as album_playlist_file:
            album_playlist_file.write(f'# Album: {album_name} ({len(album_paths)})\n')

            sorted_album_paths = sorted(album_paths, key=lambda x: natural_sort_key(os.path.basename(x)))
            for album_path in sorted_album_paths:
                encoded_path = urllib.parse.quote(album_path)
                album_playlist_file.write(f'file://{encoded_path}\n')

    # Create artist playlists
    for artist_name, artist_paths in sorted(artists.items(), key=lambda x: natural_sort_key(x[0])):
        artist_playlist_path = os.path.join(playlist_dir, f'{sanitize_playlist_name(artist_name)}.m3u')
        with open(artist_playlist_path, 'w') as artist_playlist_file:
            artist_playlist_file.write(f'# Artist: {artist_name} ({len(artist_paths)})\n')

            # Find all albums for the artist
            artist_albums = [album_name for (name, album_name) in sorted_albums if name == artist_name]

            # Read and append album playlists to the artist playlist
            for album_name in artist_albums:
                album_playlist_filename = f'{sanitize_playlist_name(album_name)}_{sanitize_playlist_name(artist_name)}.m3u'
                album_playlist_path = os.path.join(playlist_dir, album_playlist_filename)
                if os.path.exists(album_playlist_path):
                    with open(album_playlist_path, 'r') as album_playlist_file:
                        artist_playlist_file.write(album_playlist_file.read())

        # Remove the album playlists after combining them into the artist playlist
        for album_name in artist_albums:
            album_playlist_filename = f'{sanitize_playlist_name(album_name)}_{sanitize_playlist_name(artist_name)}.m3u'
            album_playlist_path = os.path.join(playlist_dir, album_playlist_filename)
            if os.path.exists(album_playlist_path):
                os.remove(album_playlist_path)

def create_album_playlists(path, playlist_dir):
    artists = {}
    albums = {}

    for root, dirs, files in os.walk(path):
        for file in files:
            if file.lower().endswith(('.aif', '.aiff')):
                artist_name = os.path.basename(os.path.dirname(root))
                album_name = os.path.basename(root)
                title = os.path.splitext(file)[0]

                artists[artist_name] = artists.get(artist_name, []) + [os.path.join(root, file)]
                albums[(artist_name, album_name)] = albums.get((artist_name, album_name), []) + [os.path.join(root, file)]

    # Sort albums by artist name and then by album name
    sorted_albums = sorted(albums.keys(), key=lambda x: (natural_sort_key(x[0]), natural_sort_key(x[1])))


    # Create album playlists
    for artist_name, album_name in sorted_albums:
        album_paths = albums[(artist_name, album_name)]
        album_playlist_path = os.path.join(playlist_dir, f'{album_name}_{artist_name}.m3u')
        with open(album_playlist_path, 'w') as album_playlist_file:
            album_playlist_file.write(f'# Album: {album_name} ({len(album_paths)})\n')

            sorted_album_paths = sorted(album_paths, key=lambda x: natural_sort_key(os.path.basename(x)))
            for album_path in sorted_album_paths:
                encoded_path = urllib.parse.quote(album_path)
                album_playlist_file.write(f'file://{encoded_path}\n')

def create_song_playlists(path, playlist_dir):
    artists = defaultdict(list)
    albums = defaultdict(list)
    songs = defaultdict(list)
    counter = defaultdict(lambda: 1)  # Universal counter for all playlists starting at 1

    for root, dirs, files in os.walk(path):
        for file in files:
            if file.lower().endswith(('.aif', '.aiff')):
                artist_name = os.path.basename(os.path.dirname(root))
                album_name = os.path.basename(root)
                title = os.path.splitext(file)[0]

                artists[artist_name].append(os.path.join(root, file))
                albums[f'{artist_name} - {album_name}'].append(os.path.join(root, file))
                songs[artist_name, album_name, title].append(os.path.join(root, file))

    # Sort albums by full album name (artist + album)
    sorted_albums = sorted(albums.keys())


    # Create song playlists
    for (artist_name, album_name, title), song_paths in songs.items():
        playlist_title = sanitize_playlist_name(title)
        song_playlist_path = os.path.join(
            playlist_dir, f'{sanitize_playlist_name(title)}_{sanitize_playlist_name(album_name)}_{sanitize_playlist_name(artist_name)}_{counter[playlist_title]}.m3u'
        )
        with open(song_playlist_path, 'w') as song_playlist_file:
            song_name = sanitize_playlist_name(title)
            song_playlist_file.write(f'# Song: {song_name} ({len(song_paths)})\n')

            sorted_song_paths = sorted(song_paths)  # Sort the song paths
            album_path = os.path.join(path, artist_name, album_name)
            album_files = sorted(
                [f for f in os.listdir(album_path) if f.lower().endswith(('.aif', '.aiff')) and not f.startswith("._")],
                key=lambda x: (int(re.search(r'\d+', x).group()) if re.search(r'\d+', x) else float('inf'), x)
            )
            sanitized_song_names = [sanitize_playlist_name(os.path.splitext(file)[0]) for file in album_files]
            current_song_index = next((i for i, song in enumerate(sanitized_song_names) if song.startswith(playlist_title)), None)
            if current_song_index is not None:
                next_song_paths = album_files[current_song_index:]
                for song_path in next_song_paths:
                    encoded_path = urllib.parse.quote(os.path.join(album_path, song_path))
                    song_playlist_file.write(f'file://{encoded_path}\n')

        counter[playlist_title] += 1

path = '/home/riley/Desktop/xxx999'
playlist_dir = '/home/riley'

# Create the playlist directory if it doesn't exist
if not os.path.exists(playlist_dir):
    os.makedirs(playlist_dir)

create_playlists(path, playlist_dir)
create_album_playlists(path, playlist_dir)
create_song_playlists(path, playlist_dir)
